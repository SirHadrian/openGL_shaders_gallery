#version 460 core
layout(location = 0) out vec4 FragColor;

uniform float u_time;
uniform vec2 u_resolution;
uniform vec2 u_mouse;

#define T u_time
#define R u_resolution
#define FC gl_FragCoord
#define M u_mouse

#define PI 3.14159265359
#define S(a, b, x) smoothstep(a, b, x)

// A cell size of 1. is equal with a space divizion.
#define CELL_SIZE 1.
// If the uv space is too big the lines will disappear.
// Increase the line size to make them appear.
#define LINE_SIZE 0.02

vec3 draw_grid(vec2 uv) {

  // Draw grid.
  vec3 lines = vec3(0.);
  if (mod(uv.x, CELL_SIZE) < LINE_SIZE)
    lines.g = 1.;
  if (mod(uv.y, CELL_SIZE) < LINE_SIZE)
    lines.g = 1.;

  // Draw axes.
  if (abs(uv.x) < LINE_SIZE)
    lines.r = 1.;
  if (abs(uv.y) < LINE_SIZE)
    lines.b = 1.;

  return lines;
}

float N21(vec2 p) {
  p = fract(p * vec2(123.34, 345.45));
  p += dot(p, p + 34.345);
  return fract(p.x * p.y);
}

void main() {

  vec2 uv = FC.xy / R.xy;
  uv -= .5;
  uv.x *= R.x / R.y;

  uv *= 3.;

  float dropSpeed = T * .25;

  uv.y += dropSpeed;

  vec2 aspect = vec2(2., 1.);
  vec3 color = vec3(0.);

  uv *= aspect;
  vec2 gv = fract(uv) - .5;
  vec2 id = floor(uv);

  // color.rg = gv;

  float n = N21(id);
  float time = (n * 2 * PI) + T;

  float w = gv.y * 10;
  float x = (n - .5) * .8;
  x += (.4 - abs(x)) * sin(3 * w) * pow(sin(w), 6) * .45;
  float y = -sin(time + sin(time + sin(time) * .5)) * .45;
  y -= (gv.x - x) * (gv.x - x);

  vec2 dropPos = (gv - vec2(x, y)) / aspect;
  color += S(.05, .03, length(dropPos));

  vec2 trailPos = (gv - vec2(x, dropSpeed)) / aspect;

  trailPos.y = (fract(trailPos.y * 8) - .5) / 8;
  float trail = S(.03, .01, length(trailPos));
  trail *= S(-.05, .05, dropPos.y);
  trail *= S(.5, y, gv.y);

  color += trail;
  color += draw_grid(gv - .5);

  // color *= 0;
  // color += N21(id);

  FragColor = vec4(color, 1.);
}
