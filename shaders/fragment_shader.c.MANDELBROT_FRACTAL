#version 460 core
layout(location = 0) out vec4 FragColor;

uniform float u_time;
uniform vec2 u_resolution;
uniform vec2 u_mouse;

#define T u_time
#define R u_resolution
#define FC gl_FragCoord
#define M u_mouse

#define PI 3.14159265359
#define S(a, b, x) smoothstep(a, b, x)

#define N 24.
#define B 4.

vec3
palette(float t, vec3 a, vec3 b, vec3 c, vec3 d)
{
  return a + b * cos(6.28318 * (c * t + d));
}

float
iterate(vec2 p)
{
  vec2 z = vec2(0), c = p;
  float i;
  for (i = 0.; i < N; i++)
  {
    z = mat2(z, -z.y, z.x) * z + c;

    if (dot(z, z) > B * B)
      break;
  }
  return i - log(log(dot(z, z)) / log(B)) / log(2.);
}

void
main()
{
  vec2 uv = (2. * FC.xy - R.xy) / R.y;

  float n = iterate(uv) / N;
  if (n == 1.)
    n = 0.;

  vec3 color = palette(n, vec3(.5), vec3(.5), vec3(1), vec3(.1, .1, .0));

  FragColor = vec4(color, 1.0);
}
