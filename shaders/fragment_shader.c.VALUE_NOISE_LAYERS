#version 460 core
layout(location = 0) out vec4 FragColor;

in vec3 color;
in vec2 texCoord;

uniform sampler2D tex0;
// Load texture
// vec4 text = texture(tex0, texCoord * vec2(-1., 1.));

uniform float u_time;
uniform vec2 u_resolution;
uniform vec2 u_mouse;

#define T u_time
#define R u_resolution
#define FC gl_FragCoord
#define M u_mouse

#define PI 3.14159265359
#define S(a, b, x) smoothstep(a, b, x)

float 
white_noise(vec2 uv)
{
  vec2 r1 = vec2(18109.3, 9145.5453);
  float r2 = 5445.12;

  return fract(sin(dot(uv, r1)) * r2);
}

float
value_noise(vec2 uv)
{
  vec2 id = floor(uv);
  vec2 gv = fract(uv);

  gv = S(0., 1., gv);

  float bl = white_noise(id);
  float br = white_noise(id + vec2(1., 0));
  float b = mix(bl, br, gv.x);

  float tl = white_noise(id + vec2(0., 1.));
  float tr = white_noise(id + vec2(1., 1.));
  float t = mix(tl, tr, gv.x);

  return mix(b, t, gv.y);
}

float
value_noise_layers(vec2 uv, int layers)
{
  float ampt = 2;
  float freq = 1;

  float vnl = 0;

  for (int i = 0; i < layers; ++i)
  {
    vnl += value_noise(uv * ampt) * freq;

    ampt *= 2.;
    freq /= 2.;
  }
  return vnl / 2.;
}

void 
main() 
{
  vec2 uv = FC.xy / R.xy;
  // uv -= .5;
  uv.x *= R.x / R.y;

  vec3 col = vec3(0.);

  uv *= 4.;

  uv += T *.5;

  col = vec3(value_noise_layers(uv, 8));

  FragColor = vec4(col, 1.);
}
